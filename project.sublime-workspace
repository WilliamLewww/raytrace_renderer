{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"norm",
				"normalV\tabc"
			],
			[
				"inter",
				"intersectionCount\tabc"
			],
			[
				"inters",
				"intersections\tabc"
			],
			[
				"pointToL",
				"pointToLightN\tabc"
			],
			[
				"SCRE",
				"SCREENHEIGHT\tabc"
			],
			[
				"SCR",
				"SCREENWIDTH\tabc"
			],
			[
				"createRo",
				"createRotationMatrixX\t(transform.h)"
			],
			[
				"sph",
				"sphereCount\tabc"
			],
			[
				"createI",
				"createIdentityMatrix\t(camera.h)"
			],
			[
				"sphere",
				"sphereArray\tabc"
			],
			[
				"interse",
				"intersectionCount\tabc"
			],
			[
				"interS",
				"intersectionCount\tabc"
			],
			[
				"light",
				"lightArray\tabc"
			],
			[
				"tempI",
				"tempIntersections\tabc"
			],
			[
				"tempIn",
				"tempIntersectionCount\tabc"
			],
			[
				"spherer",
				"sphereArray\tabc"
			],
			[
				"intersect",
				"intersectionCount\tabc"
			],
			[
				"interSe",
				"intersectWorld\t(world.h)"
			],
			[
				"shper",
				"sphereCount\tabc"
			],
			[
				"intersec",
				"intersectionCount\t(sphere.h)"
			],
			[
				"spher",
				"sphereCount\tabc"
			],
			[
				"li",
				"light\tabc"
			],
			[
				"shp",
				"sphereArray\t(world.h)"
			],
			[
				"lig",
				"lightArray\t(world.h)"
			],
			[
				"createPoi",
				"createPointLight\t(light.h)"
			],
			[
				"raytrace_",
				"raytrace_renderer_cpu\tabc"
			],
			[
				"ligh",
				"lighting\t(light.h)"
			],
			[
				"createMa",
				"createMaterial\t(light.h)"
			],
			[
				"int",
				"intensity\tabc"
			],
			[
				"refle",
				"reflectV\tabc"
			],
			[
				"Mat",
				"Material\t(light.h)"
			],
			[
				"cra",
				"createVector\tabc"
			],
			[
				"objec",
				"objectPoint\tabc"
			],
			[
				"createRot",
				"createRotationMatrixZ\t(transform.h)"
			],
			[
				"norma",
				"normalAt\t(sphere.h)"
			],
			[
				"create",
				"createVector\t(tuple.h)"
			],
			[
				"crea",
				"createVector\t(tuple.h)"
			],
			[
				"SC",
				"SCREENHEIGHT\tabc"
			],
			[
				"close",
				"closestHit\tabc"
			],
			[
				"clos",
				"closestHit\tabc"
			],
			[
				"intersectio",
				"intersectionCount\t(ray.h)"
			],
			[
				"In",
				"Intersection\tabc"
			],
			[
				"sp",
				"sphereToRay\tabc"
			],
			[
				"trans",
				"translate\t(transform.h)"
			],
			[
				"det",
				"determinate\tabc"
			],
			[
				"mati",
				"matrix\tabc"
			],
			[
				"colu",
				"columnCount\tabc"
			],
			[
				"col",
				"columnCount\tabc"
			],
			[
				"row",
				"rowCount\tabc"
			],
			[
				"matr",
				"matrix\tabc"
			],
			[
				"matri",
				"matrix\tabc"
			],
			[
				"curr",
				"currentY\tabc"
			],
			[
				"cur",
				"currentY\tabc"
			],
			[
				"createM",
				"createMatrix\t(matrix.h)"
			],
			[
				"colo",
				"columnCount\tabc"
			],
			[
				"Matri",
				"Matrix2\tabc"
			],
			[
				"mat",
				"matrix\tabc"
			],
			[
				"tuple",
				"tupleB\tabc"
			],
			[
				"tup",
				"tupleB\tabc"
			],
			[
				"tupl",
				"tupleB\tabc"
			],
			[
				"tu",
				"tuple\tabc"
			],
			[
				"initial",
				"initialize\tabc"
			],
			[
				"frameBuff",
				"frameBufferHeight\tabc"
			],
			[
				"frameB",
				"frameBufferWidth\tabc"
			],
			[
				"SCREE",
				"SCREENWIDTH\tabc"
			],
			[
				"exten",
				"extensions\tabc"
			],
			[
				"extens",
				"extensions\tabc"
			],
			[
				"insta",
				"instance\tabc"
			],
			[
				"sur",
				"surface\tabc"
			],
			[
				"graphi",
				"graphicsQueueIndex\tabc"
			],
			[
				"initialize",
				"initializeLogicalDevice\t(engine.cpp)"
			],
			[
				"initialze",
				"initializePhysicalDevice\tabc"
			],
			[
				"instance",
				"instanceExtensions\tabc"
			],
			[
				"initi",
				"initializeWindow\t(engine.h)"
			],
			[
				"check",
				"checkUpdated\tabc"
			],
			[
				"m_tran",
				"m_transformBufferMemory\t(hello_vulkan.h)"
			],
			[
				"tran",
				"transformBuffer\tabc"
			],
			[
				"update",
				"updateUniformBuffer\tabc"
			],
			[
				"command",
				"commandBuffer\tabc"
			],
			[
				"initializePipe",
				"initializeRaytracingPipeline\tabc"
			],
			[
				"initializeRay",
				"initializeRaytracingDescriptorSet\tabc"
			],
			[
				"inde",
				"indexBuffer\tabc"
			],
			[
				"initializeDes",
				"initializeRaytracingDescriptorSet\t(engine.h)"
			],
			[
				"que",
				"queueFamilyCount\tabc"
			],
			[
				"graphics",
				"graphicsQueueFamilyIndex\tabc"
			],
			[
				"grap",
				"graphicsQueue\tabc"
			],
			[
				"enable",
				"enableRayTracing\tabc"
			],
			[
				"textu",
				"textureCoordinate\tabc"
			],
			[
				"comman",
				"commandBuffer\tabc"
			],
			[
				"logica",
				"logicalDevice\tabc"
			],
			[
				"allo",
				"allocator\tabc"
			],
			[
				"Fra",
				"framebufferWidth"
			],
			[
				"fram",
				"framebufferWidth\tabc"
			],
			[
				"surfa",
				"surfaceFormat\tabc"
			],
			[
				"logi",
				"logicalDevice\tabc"
			],
			[
				"exte",
				"extensionName\tabc"
			],
			[
				"phys",
				"physicalDevice\t(engine.h)"
			],
			[
				"ray",
				"rayTracingEnabled\tabc"
			],
			[
				"py",
				"physicalDevice\tabc"
			],
			[
				"phy",
				"physicalDevice\t(engine.h)"
			],
			[
				"phyi",
				"physicalDevice\tabc"
			],
			[
				"geom",
				"geometry\tabc"
			],
			[
				"geome",
				"geometry\tabc"
			],
			[
				"geo",
				"geometryAABB\tabc"
			],
			[
				"geomet",
				"geometryTriangle\tabc"
			],
			[
				"positionI",
				"positionIndexBuffer\tabc"
			],
			[
				"desci",
				"descriptorSets\t(engine.h)"
			],
			[
				"descir",
				"descriptorSets\tabc"
			],
			[
				"UNI",
				"UNIFORM_COORDINATE_OBJECT\t(joiner.h)"
			],
			[
				"UNIFORM",
				"UNIFORM_LIGHT_OBJECT\t(joiner.h)"
			],
			[
				"unifo",
				"uniformObjects\tabc"
			],
			[
				"uniform",
				"uniformObjectBuffers\tabc"
			],
			[
				"swapCh",
				"swapChainImages\tabc"
			],
			[
				"lightObjec",
				"lightObjectBuffer\tabc"
			],
			[
				"normalVert",
				"normalVertices\tabc"
			],
			[
				"curren",
				"currentModelRotation\tabc"
			],
			[
				"textureCo",
				"textureCoordinateVertices\tabc"
			],
			[
				"pusb",
				"push_back\tabc"
			],
			[
				"getColor",
				"getColorVertexBufferMemory\t(joiner.h)"
			],
			[
				"getPosition",
				"getPositionVertexBufferMemory\t(joiner.h)"
			],
			[
				"VkDevi",
				"VkDeviceMemory\tabc"
			],
			[
				"getPo",
				"getPositionVertexBuffer\t(joiner.h)"
			],
			[
				"copy",
				"copyBuffer\tabc"
			],
			[
				"posi",
				"positionBuffer\tabc"
			],
			[
				"colorBuff",
				"colorBufferMemory\tabc"
			],
			[
				"colorBu",
				"colorBufferInfo\tabc"
			],
			[
				"positi",
				"positionBufferInfo\tabc"
			],
			[
				"positionBu",
				"positionBufferMemory\t(engine.h)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src_CPU/world.h",
			"settings":
			{
				"buffer_size": 6497,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src_CPU/camera.h",
			"settings":
			{
				"buffer_size": 1929,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#pragma once\n#include <fstream>\n#include \"tuple.h\"\n\nclass Canvas{\nprivate:\n\tint width;\n\tint height;\n\n\tTuple** pixelData;\npublic:\n\tinline Canvas(int width, int height) {\n\t\tthis->width = width;\n\t\tthis->height = height;\n\n\t\tpixelData = new Tuple*[width];\n\t\tfor (int x = 0; x < width; x++) {\n\t\t\tpixelData[x] = new Tuple[height];\n\t\t\tfor (int y = 0; y < height; y++) {\n\t\t\t\tpixelData[x][y] = createColor(0.0, 0.0, 0.0);\n\t\t\t}\n\t\t}\n\t}\n\n\tinline ~Canvas() {\n\t\tfor (int x = 0; x < width; x++) {\n\t\t\tdelete [] pixelData[width];\n\t\t}\n\n\t\tdelete [] pixelData;\n\t}\n\n\tinline void setPixel(int x, int y, Tuple color) {\n\t\tpixelData[x][y] = color;\n\t}\n\n\tTuple getPixel(int x, int y) {\n\t\treturn pixelData[x][y];\n\t}\n\n\tvoid saveToFile(const char* filename) {\n\t\tstd::ofstream file;\n\t\tfile.open(filename);\n\n\t\tfile << \"P3\\n\" << width << \" \" << height << \"\\n255\\n\";\n\t\tfor (int y = 0; y < height; y++) {\n\t\t\tfor (int x = 0; x < width; x++) {\n\t\t\t\tTuple color = getPixel(x, y) * 255;\n\n\t\t\t\tif (color.x > 255) { color.x = 255; }\n\t\t\t\tif (color.y > 255) { color.y = 255; }\n\t\t\t\tif (color.z > 255) { color.z = 255; }\n\n\t\t\t\tfile << (int)color.x << \" \" << (int)color.y << \" \" << (int)color.z << \"\\n\";\n\t\t\t}\n\t\t}\n\n\t\tfile.close();\n\t}\n};",
			"file": "src_CPU/canvas.h",
			"file_size": 1185,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 1185,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#pragma once\n\n//FIX MEMORY LEAK\n\nstruct Matrix {\n\tfloat** data;\n\n\tint rowCount;\n\tint columnCount;\n\n\tfloat* operator[](int x) {\n\t\treturn data[x];\n\t};\n};\n\nconst float getElementFromMatrix(Matrix matrix, int x, int y) {\n\treturn matrix[x][y];\n}\n\nbool operator==(Matrix matrixA, Matrix matrixB) {\n\tbool greater = false;\n\n\tif (matrixA.rowCount != matrixB.rowCount || matrixA.columnCount != matrixB.columnCount) {\n\t\treturn false;\n\t}\n\n\tfor (int x = 0; !greater && x < matrixA.rowCount; x++) {\n\t\tfor (int y = 0; !greater && y < matrixA.columnCount; y++) {\n\t\t\tif (abs(matrixA[x][y] - matrixB[x][y]) >= EPSILON_COMPARISON) {\n\t\t\t\tgreater = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn !greater;\n}\n\nstd::ostream& operator<<(std::ostream& os, const Matrix& matrix) {\n\tfor (int x = 0; x < matrix.rowCount; x++) {\n\t\tos << \"[\";\n\t\tfor (int y = 0; y < matrix.columnCount; y++) {\n\t\t\tos << getElementFromMatrix(matrix, x, y);\n\t\t\tif (y < matrix.columnCount - 1) { os << \", \"; }\n\t\t}\n\t\tos << \"]\";\n\t\tif (x < matrix.rowCount - 1) { os << \"\\n\"; }\n\t\t\n\t}\n\n\treturn os;\n}\n\nMatrix createMatrix(int rowCount, int columnCount) {\n\tMatrix temp;\n\ttemp.data = new float*[rowCount];\n\tfor (int x = 0; x < rowCount; x++) {\n\t\ttemp.data[x] = new float[columnCount];\n\t\tfor (int y = 0; y < columnCount; y++) {\n\t\t\ttemp.data[x][y] = 0.0;\n\t\t}\n\t}\n\n\ttemp.rowCount = rowCount;\n\ttemp.columnCount = columnCount;\n\n\treturn temp;\n}\n\nMatrix createIdentityMatrix(int rowCount) {\n\tMatrix temp = createMatrix(rowCount, rowCount);\n\tfor (int x = 0; x < rowCount; x++) {\n\t\ttemp[x][x] = 1.0;\n\t}\n\n\treturn temp;\n}\n\nMatrix operator*(Matrix matrixA, Matrix matrixB) {\n\tMatrix temp = createMatrix(matrixA.rowCount, matrixB.columnCount);\n\tfor (int x = 0; x < matrixA.rowCount; x++) {\n\t\tfor (int y = 0; y < matrixB.columnCount; y++) {\n\t\t\tfor (int z = 0; z < matrixA.columnCount; z++) {\n\t\t\t\ttemp[x][y] += (matrixA[x][z] * matrixB[z][y]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn temp;\n}\n\nTuple operator*(Matrix matrix, Tuple tuple) {\n\treturn {\n\t\t((matrix[0][0] * tuple.x) + (matrix[0][1] * tuple.y) + (matrix[0][2] * tuple.z) + (matrix[0][3] * tuple.w)),\n \t\t((matrix[1][0] * tuple.x) + (matrix[1][1] * tuple.y) + (matrix[1][2] * tuple.z) + (matrix[1][3] * tuple.w)),\n \t\t((matrix[2][0] * tuple.x) + (matrix[2][1] * tuple.y) + (matrix[2][2] * tuple.z) + (matrix[2][3] * tuple.w)),\n \t\t((matrix[3][0] * tuple.x) + (matrix[3][1] * tuple.y) + (matrix[3][2] * tuple.z) + (matrix[3][3] * tuple.w))\n\t};\n}\n\nMatrix transpose(Matrix matrix) {\n\tMatrix temp = createMatrix(matrix.columnCount, matrix.rowCount);\n\tfor (int x = 0; x < matrix.rowCount; x++) {\n\t\tfor (int y = 0; y < matrix.columnCount; y++) {\n\t\t\ttemp[y][x] = matrix[x][y];\n\t\t}\n\t}\n\n\treturn temp;\n}\n\nfloat cofactor(Matrix matrix, int row, int column);\nfloat determinate(Matrix matrix) {\n\tif (matrix.rowCount == 2 && matrix.columnCount == 2) {\n\t\treturn ((matrix[0][0] * matrix[1][1]) - (matrix[1][0] * matrix[0][1]));\n\t}\n\t\n\tfloat det = 0;\n\tfor (int y = 0; y < matrix.columnCount; y++) {\n\t\tdet += matrix[0][y] * cofactor(matrix, 0, y);\n\t}\n\n\treturn det;\n}\n\nMatrix submatrix(Matrix matrix, int row, int column) {\n\tMatrix temp = createMatrix(matrix.rowCount - 1, matrix.columnCount - 1);\n\n\tint currentX = 0;\n\tint currentY = 0;\n\tfor (int x = 0; x < matrix.rowCount; x++) {\n\t\tfor (int y = 0; y < matrix.columnCount; y++) {\n\t\t\tif (x != row && y != column) {\n\t\t\t\ttemp[currentX][currentY] = matrix[x][y];\n\t\t\t\tif (currentY + 1 == temp.columnCount) {\n\t\t\t\t\tcurrentX += 1;\n\t\t\t\t\tcurrentY = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcurrentY += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn temp;\n}\n\nfloat matrixMinor(Matrix matrix, int row, int column) {\n\tMatrix temp = submatrix(matrix, row, column);\n\treturn determinate(temp);\n}\n\nfloat cofactor(Matrix matrix, int row, int column) {\n\tif ((row + column) % 2 == 0) {\n\t\treturn matrixMinor(matrix, row, column);\n\t}\n\n\treturn -matrixMinor(matrix, row, column);\n}\n\nMatrix inverse(Matrix matrix) {\n\tMatrix temp = createMatrix(matrix.rowCount, matrix.columnCount);\n\tfloat det = determinate(matrix);\n\n\tfor (int x = 0; x < temp.rowCount; x++) {\n\t\tfor (int y = 0; y < temp.columnCount; y++) {\n\t\t\tfloat c = cofactor(matrix, x, y);\n\n\t\t\ttemp[y][x] = c / det;\n\t\t}\n\t}\n\n\treturn temp;\n}",
			"file": "src_CPU/matrix.h",
			"file_size": 4280,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 4107,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#pragma once\n#include \"tuple.h\"\n#include \"matrix.h\"\n\nstruct Ray {\n\tTuple origin;\n\tTuple direction;\n};\n\nstd::ostream& operator<<(std::ostream& os, const Ray& ray) {\n    os << \"origin: \" << ray.origin << \", direction: \" << ray.direction;\n    return os;\n}\n\nRay createRay(Tuple origin, Tuple direction) {\n\treturn { origin, direction };\n}\n\nTuple project(Ray ray, float t) {\n\treturn ray.origin + (ray.direction * t);\n}\n\nRay transform(Ray ray, Matrix matrix) {\n\treturn createRay(matrix * ray.origin, matrix * ray.direction);\n}",
			"file": "src_CPU/ray.h",
			"file_size": 519,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 519,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#pragma once\n#include \"tuple.h\"\n\nstruct PointLight {\n\tTuple position;\n\tTuple intensity;\n};\n\nstruct Material {\n\tTuple color;\n\tfloat ambient;\n\tfloat diffuse;\n\tfloat specular;\n\tfloat shininess;\n};\n\nPointLight createPointLight(Tuple position, Tuple intensity) {\n\treturn { position, intensity };\n}\n\nMaterial createMaterial() {\n\treturn { createColor(1, 1, 1), 0.1, 0.9, 0.9, 200.0 };\n}\n\nTuple lighting(Material material, PointLight light, Tuple point, Tuple eyeV, Tuple normalV, bool inShadow) {\n\tTuple ambient;\n\tTuple diffuse;\n\tTuple specular;\n\n\tTuple effectiveColor = hadamardProduct(material.color, light.intensity);\n\tTuple lightV = normalize(light.position - point);\n\n\tambient = effectiveColor * material.ambient;\n\n\tfloat lightDotNormal = dot(lightV, normalV);\n\tif (lightDotNormal < 0 || inShadow) {\n\t\tdiffuse = createColor(0.0, 0.0, 0.0);\n\t\tspecular = createColor(0.0, 0.0, 0.0);\n\t}\n\telse {\n\t\tdiffuse = effectiveColor * material.diffuse * lightDotNormal;\n\n\t\tTuple reflectV = reflect(negate(lightV), normalV);\n\t\tfloat reflectDotEye = dot(reflectV, eyeV);\n\n\t\tif (reflectDotEye <= 0) {\n\t\t\tspecular = createColor(0.0, 0.0, 0.0);\n\t\t}\n\t\telse {\n\t\t\tfloat factor = pow(reflectDotEye, material.shininess);\n\t\t\tspecular = light.intensity * material.specular * factor;\n\t\t}\n\t}\n\n\treturn ambient + diffuse + specular;\n}",
			"file": "src_CPU/light.h",
			"file_size": 1357,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 1302,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#pragma once\n#include <cmath>\n#include \"matrix.h\"\n\nMatrix createTranslateMatrix(float x, float y, float z) {\n\tMatrix temp = createIdentityMatrix(4);\n\ttemp[0][3] = x;\n\ttemp[1][3] = y;\n\ttemp[2][3] = z;\n\n\treturn temp;\n}\n\nMatrix createScaleMatrix(float x, float y, float z) {\n\tMatrix temp = createIdentityMatrix(4);\n\ttemp[0][0] = x;\n\ttemp[1][1] = y;\n\ttemp[2][2] = z;\n\n\treturn temp;\n}\n\nMatrix createRotationMatrixX(float radians) {\n\tMatrix temp = createIdentityMatrix(4);\n\ttemp[1][1] = cos(radians);\n\ttemp[1][2] = -sin(radians);\n\ttemp[2][1] = sin(radians);\n\ttemp[2][2] = cos(radians);\n\n\treturn temp;\n}\n\nMatrix createRotationMatrixY(float radians) {\n\tMatrix temp = createIdentityMatrix(4);\n\ttemp[0][0] = cos(radians);\n\ttemp[0][2] = sin(radians);\n\ttemp[2][0] = -sin(radians);\n\ttemp[2][2] = cos(radians);\n\n\treturn temp;\n}\n\nMatrix createRotationMatrixZ(float radians) {\n\tMatrix temp = createIdentityMatrix(4);\n\ttemp[0][0] = cos(radians);\n\ttemp[0][1] = -sin(radians);\n\ttemp[1][0] = sin(radians);\n\ttemp[1][1] = cos(radians);\n\n\treturn temp;\n}\n\nMatrix createShearMatrix(float xy, float xz, float yx, float yz, float zx, float zy) {\n\tMatrix temp = createIdentityMatrix(4);\n\ttemp[0][1] = xy;\n\ttemp[0][2] = xz;\n\ttemp[1][0] = yx;\n\ttemp[1][2] = yz;\n\ttemp[2][0] = zx;\n\ttemp[2][1] = zy;\n\n\treturn temp;\n}",
			"file": "src_CPU/transform.h",
			"file_size": 1283,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 1283,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "{\n\t\"build_systems\":\n\t[\n\t\t{\n\t\t\t\"name\": \"raytrace_renderer CPU\",\n\t\t\t\"cmd\":\n\t\t\t[\n\t\t\t\t\"g++\",\n\t\t\t\t\"C:/Users/William/Desktop/raytrace_renderer/src_CPU/main.cpp\",\n\t\t\t\t\"-o\",\n\t\t\t\t\"C:/Users/William/Desktop/raytrace_renderer/bin/raytrace_renderer_cpu\",\n\t\t\t\t\"&&\",\n\t\t\t\t\"C:/Users/William/Desktop/raytrace_renderer/bin/raytrace_renderer_cpu\",\n\t\t\t\t\"image.ppm\"\n\t\t\t],\n\t\t\t\"file_regex\": \"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$\",\n\t\t\t\"selector\": \"source.c, source.c++\",\n\t\t\t\"shell\": true,\n\t\t\t\"working_dir\": \"C:/Users/William/Desktop/raytrace_renderer/dump\",\n\t\t}\n\t],\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t\"path\": \".\"\n\t\t}\n\t]\n}\n",
			"file": "project.sublime-project",
			"file_size": 586,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 586,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src_CPU/sphere.h",
			"settings":
			{
				"buffer_size": 2524,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"canvas.h\"\n#include \"tuple.h\"\n#include \"matrix.h\"\n#include \"transform.h\"\n#include \"ray.h\"\n#include \"world.h\"\n#include \"camera.h\"\n\nconst int SCREENWIDTH = 100;\nconst int SCREENHEIGHT = 50;\n\nCanvas* render(Camera camera, World world) {\n\tCanvas* canvas = new Canvas(camera.hSize, camera.vSize);\n\n\tstd::cout << \"rendering ray traced image...\" << std::endl;\n\n\tfor (int y = 0; y < camera.vSize; y++) {\n\t\tfor (int x = 0; x < camera.hSize; x++) {\n\t\t\tRay ray = rayForPixel(camera, x, y);\n\t\t\tTuple color = colorAt(world, ray);\n\n\t\t\tcanvas->setPixel(x, y, color);\n\t\t}\n\t}\n\n\tstd::cout << \"finished rendering\" << std::endl;\n\n\treturn canvas;\n}\n\nint main(int argc, const char** argv) {\n\tWorld world = createWorld1();\n\t\n\tCamera camera = createCamera(SCREENWIDTH, SCREENHEIGHT, M_PI / 3);\n\tTuple from = createPoint(0, 1.5, -5);\n\tTuple to = createPoint(0, 1, 0);\n\tTuple up = createVector(0, 1, 0);\n\tcamera.viewMatrix = createViewMatrix(from, to, up);\n\n\tCanvas* canvas = render(camera, world);\n\tcanvas->saveToFile(argv[1]);\n\tstd::cout << \"saved image as: [\" << argv[1] << \"]\" << std::endl;\n}",
			"file": "src_CPU/main.cpp",
			"file_size": 1079,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 1079,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#pragma once\n#include <iostream>\n#include <cmath>\n\nconst float EPSILON_COMPARISON = 0.00001;\n\nstruct Tuple {\n\tfloat x;\n\tfloat y;\n\tfloat z;\n\tfloat w;\n};\n\nbool operator==(Tuple tupleA, Tuple tupleB) {\n\treturn (abs(tupleA.x - tupleB.x) < EPSILON_COMPARISON && abs(tupleA.y - tupleB.y) < EPSILON_COMPARISON && abs(tupleA.z - tupleB.z) < EPSILON_COMPARISON && abs(tupleA.w - tupleB.w) < EPSILON_COMPARISON);\n}\n\nstd::ostream& operator<<(std::ostream& os, const Tuple& tuple) {\n    os << \"(\" << tuple.x << \", \" << tuple.y << \", \" << tuple.z << \", \" << tuple.w << \")\";\n    return os;\n}\n\nTuple createVector(float x = 0.0, float y = 0.0, float z = 0.0) {\n\treturn { x, y, z, 0.0 };\n}\n\nTuple createPoint(float x = 0.0, float y = 0.0, float z = 0.0) {\n\treturn { x, y, z, 1.0 };\n}\n\nTuple createColor(float x = 0.0, float y = 0.0, float z = 0.0) {\n\treturn { x, y, z, 1.0 };\n}\n\nTuple operator+(Tuple tupleA, Tuple tupleB) {\n\treturn { tupleA.x + tupleB.x, tupleA.y + tupleB.y, tupleA.z + tupleB.z, tupleA.w + tupleB.w };\n}\n\nTuple operator-(Tuple tupleA, Tuple tupleB) {\n\treturn { tupleA.x - tupleB.x, tupleA.y - tupleB.y, tupleA.z - tupleB.z, tupleA.w - tupleB.w };\n}\n\nTuple negate(Tuple tuple) {\n\treturn { -tuple.x, -tuple.y, -tuple.z, -tuple.w };\n}\n\nTuple operator*(Tuple tuple, float scalar) {\n\treturn { tuple.x * scalar, tuple.y * scalar, tuple.z * scalar, tuple.w * scalar };\n}\n\nTuple operator*(float scalar, Tuple tuple) {\n\treturn { tuple.x * scalar, tuple.y * scalar, tuple.z * scalar, tuple.w * scalar };\n}\n\nTuple operator/(Tuple tuple, float scalar) {\n\treturn { tuple.x / scalar, tuple.y / scalar, tuple.z / scalar, tuple.w / scalar };\n}\n\nfloat magnitude(Tuple tuple) {\n\treturn sqrt(pow(tuple.x, 2) + pow(tuple.y, 2) + pow(tuple.z, 2) + pow(tuple.w, 2));\n}\n\nTuple normalize(Tuple tuple) {\n\treturn { tuple.x / magnitude(tuple), tuple.y / magnitude(tuple), tuple.z / magnitude(tuple), tuple.w / magnitude(tuple) };\n}\n\nfloat dot(Tuple tupleA, Tuple tupleB) {\n\treturn ((tupleA.x * tupleB.x) + (tupleA.y * tupleB.y) + (tupleA.z * tupleB.z) + (tupleA.w * tupleB.w));\n}\n\nTuple cross(Tuple tupleA, Tuple tupleB) {\n\treturn { (tupleA.y * tupleB.z) - (tupleA.z * tupleB.y), (tupleA.z * tupleB.x) - (tupleA.x * tupleB.z), (tupleA.x * tupleB.y) - (tupleA.y * tupleB.x) };\n}\n\nTuple hadamardProduct(Tuple tupleA, Tuple tupleB) {\n\treturn { tupleA.x * tupleB.x, tupleA.y * tupleB.y, tupleA.z * tupleB.z, tupleA.w * tupleB.w };\n}\n\nTuple reflect(Tuple vector, Tuple normal) {\n\treturn vector - (normal * 2 * dot(vector, normal));\n}",
			"file": "src_CPU/tuple.h",
			"file_size": 2503,
			"file_write_time": 132114872076652731,
			"settings":
			{
				"buffer_size": 2503,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "raytrace_renderer CPU",
	"build_system_choices":
	[
		[
			[
				[
					"Compile Project",
					""
				],
				[
					"Compile Project",
					"Compile Shaders"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Compile Project",
				""
			]
		],
		[
			[
				[
					"NoTears",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"NoTears",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Vulkan-Phong",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Vulkan-Phong",
				""
			]
		],
		[
			[
				[
					"Vulkan-Phong",
					""
				],
				[
					"Vulkan-Phong",
					"Compile Application"
				],
				[
					"Vulkan-Phong",
					"Compile Shaders"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Vulkan-Phong",
				""
			]
		],
		[
			[
				[
					"Vulkan-Phong",
					""
				],
				[
					"Vulkan-Phong",
					"Compile Shaders"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Vulkan-Phong",
				""
			]
		],
		[
			[
				[
					"Vulkan-Phong",
					""
				],
				[
					"Vulkan-Phong",
					"Convert Shaders"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Vulkan-Phong",
				""
			]
		],
		[
			[
				[
					"raytrace_renderer CPU",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"raytrace_renderer CPU",
				""
			]
		],
		[
			[
				[
					"raytrace_renderer CPU",
					""
				],
				[
					"raytrace_renderer CPU",
					"linux"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"raytrace_renderer CPU",
				"linux"
			]
		],
		[
			[
				[
					"raytrace_renderer CPU",
					""
				],
				[
					"raytrace_renderer CPU",
					"raytrace_renderer CPU linux"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"raytrace_renderer CPU",
				"raytrace_renderer CPU linux"
			]
		],
		[
			[
				[
					"vkray_corgi",
					""
				],
				[
					"vkray_corgi",
					"Compile Application"
				],
				[
					"vkray_corgi",
					"Compile Ray-Tracing Shaders"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"vkray_corgi",
				""
			]
		],
		[
			[
				[
					"vkray_corgi",
					""
				],
				[
					"vkray_corgi",
					"Compile Application"
				],
				[
					"vkray_corgi",
					"Compile Shaders"
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"vkray_corgi",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"case",
				"Convert Case: Upper Case"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"ar",
				"Arithmetic"
			],
			[
				"a",
				"Arithmetic"
			],
			[
				"ari",
				"Arithmetic"
			],
			[
				"color sc",
				"UI: Select Color Scheme"
			],
			[
				"colorsub",
				"Colorsublime: Install Theme"
			],
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"the",
				"UI: Select Theme"
			],
			[
				"colorsc",
				"UI: Select Color Scheme"
			],
			[
				"colorsu",
				"Colorsublime: Install Theme"
			],
			[
				"packa",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/wlew/Desktop/raytrace_renderer"
	],
	"file_history":
	[
		"/home/wlew/Desktop/raytrace_renderer/run-cpu.sh",
		"/home/wlew/Desktop/raytrace_renderer/project.sublime-project",
		"/home/wlew/Desktop/raytrace_renderer/dump/test.ppm",
		"/C/Users/William/Desktop/raytrace_renderer/src_CPU/tuple.h",
		"/C/Users/William/Desktop/raytrace_renderer/project.sublime-project",
		"/C/Users/William/Desktop/raytrace_renderer/src_CPU/ray.h",
		"/C/Users/William/Desktop/raytrace_renderer/src_CPU/canvas.h",
		"/C/Users/William/Desktop/raytrace_renderer/dump/convert-ppm-to-jpg.py",
		"/C/Users/William/Desktop/raytrace_renderer/dump/test.ppm",
		"/C/Users/William/Desktop/raytrace_renderer/dump/convert.py",
		"/C/Users/William/Desktop/boxes_1.ppm",
		"/C/Users/William/Desktop/raytrace_renderer/CPU/main.cpp",
		"/C/Users/William/Desktop/raytrace_renderer/.gitignore",
		"/C/Users/William/Desktop/raytrace_renderer/test.ppm",
		"/C/Users/William/Desktop/vkray_corgi/src/hello_vulkan.cpp",
		"/C/Users/William/Desktop/vkray_corgi/src/hello_vulkan.h",
		"/C/Users/William/Desktop/vkray_corgi/main.cpp",
		"/C/Users/William/Desktop/vkray_corgi/shaders/closesthit.rchit",
		"/C/Users/William/Desktop/vkray_corgi/src/vk_context.h",
		"/C/Users/William/Desktop/vkray_corgi/src/vk_context.cpp",
		"/C/Users/William/Desktop/vkray_corgi/shaders/raygen.rgen",
		"/C/Users/William/Desktop/vkray_corgi/project.sublime-project",
		"/C/Users/William/Desktop/vkray_corgi/shaders/frag_shader.frag",
		"/C/Users/William/Desktop/vkexamples/media/scenes/Medieval_building.obj",
		"/C/Users/William/Desktop/vkexamples/media/scenes/Medieval_building.mtl",
		"/C/Users/William/Desktop/vkray_corgi/res/cube_multi.obj",
		"/C/Users/William/Desktop/vkray_corgi/res/corgi.mtl",
		"/C/Users/William/Desktop/vkray_corgi/res/corgi.obj",
		"/C/Users/William/Desktop/vkexamples/media/scenes/cube_multi.mtl",
		"/C/Users/William/Desktop/vkexamples/media/scenes/cube_multi.obj",
		"/C/Users/William/Desktop/vkexamples/media/scenes/cube.mtl",
		"/C/Users/William/Desktop/vkray_corgi/src/obj_loader.cpp",
		"/C/Users/William/Desktop/vkexamples/VkExample1/main.cpp",
		"/C/Users/William/Desktop/vkexamples/common/tiny_obj_loader.h",
		"/C/Libraries/tinyobjloader-master/tiny_obj_loader.h",
		"/C/Users/William/Desktop/rtxON-master/src/framework/vulkanapp.h",
		"/C/Users/William/Desktop/rtxON-master/src/framework/vulkanapp.cpp",
		"/C/Users/William/Desktop/rtxON-master/src/framework/vulkanhelpers.cpp",
		"/C/Users/William/Desktop/rtxON-master/src/framework/vulkanhelpers.h",
		"/C/Users/William/Desktop/vkray_corgi/src/main.cpp",
		"/C/Users/William/Desktop/vkexamples/common/vk_context.cpp",
		"/C/Users/William/Desktop/vkexamples/common/vk_context.h",
		"/C/Users/William/Desktop/vkray_corgi/src/application.cpp",
		"/C/Users/William/Desktop/vkray_corgi/src/application.h",
		"/C/Users/William/Desktop/vkray_corgi/src/engine.cpp",
		"/C/Users/William/Desktop/vkray_corgi/src/engine.h",
		"/C/Users/William/Desktop/vkexamples/VkExample1/hello_vulkan.h",
		"/C/Users/William/Desktop/vkexamples/VkExample1/hello_vulkan.cpp",
		"/C/Users/William/Desktop/VkRayTutorials/Source/Common/Application.h",
		"/C/Users/William/Desktop/VkRayTutorials/Source/Common/Application.cpp",
		"/C/Users/William/Desktop/vkexamples/common/manipulator.h",
		"/C/Users/William/Desktop/vkexamples/common/manipulator.cpp",
		"/C/Users/William/Desktop/VkRayTutorials/Source/01_InitRaytracing/01_InitRaytracing.cpp",
		"/C/Users/William/Desktop/vkray_corgi/shaders/phong.frag",
		"/C/Users/William/Desktop/vkray_corgi/shaders/phong.vert",
		"/C/Libraries/vulkannv/nv_helpers_vk/DescriptorSetGenerator.h",
		"/C/Users/William/Desktop/vkray_corgi/.gitignore",
		"/C/Users/William/Desktop/vkray_corgi/shaders/test.vert",
		"/C/Users/William/Desktop/vkray_corgi/shaders/basic.vert",
		"/C/Users/William/Desktop/vulkan_phong/project.sublime-project",
		"/C/Users/William/Desktop/vkray_corgi/shaders/miss.rmiss",
		"/C/Users/William/Desktop/vkray_corgi/external/vulkannv/nv_helpers_vk/DescriptorSetGenerator.h",
		"/C/Libraries/vulkannv/nv_helpers_vk/BottomLevelASGenerator.cpp",
		"/C/Libraries/vulkannv/nv_helpers_vk/BottomLevelASGenerator.h",
		"/C/Users/William/Desktop/VkRayTutorials/Source/Common/RaytracingApplication.h",
		"/C/Users/William/Desktop/VkRayTutorials/Source/Common/RaytracingApplication.cpp",
		"/C/Users/William/AppData/Roaming/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
		"/C/Users/William/Desktop/rtxON-master/src/rtxApp.cpp",
		"/C/Users/William/Desktop/rtxON-master/src/rtxApp.h",
		"/C/Users/William/Desktop/rtxON-master/src/main.cpp",
		"/C/Users/William/Desktop/VkRayTutorials/Projects/01_InitRaytracing.vcxproj",
		"/C/Users/William/Desktop/VkRayTutorials/Projects/01_InitRaytracing.vcxproj.filters",
		"/C/Users/William/Desktop/VkRayTutorials/Projects/01_InitRaytracing.vcxproj.user",
		"/C/Users/William/Desktop/VkRayTutorials/Bin/01_InitRaytracing.iobj",
		"/C/Users/William/Desktop/VkRayTutorials/Bin/01_InitRaytracing.ipdb",
		"/C/Users/William/Desktop/VkRayTutorials/Bin/01_InitRaytracing.pdb",
		"/C/Users/William/Desktop/vkexamples/VkExamples.sln",
		"/C/Users/William/Desktop/vkexamples/libs/glfw/include/GLFW/glfw3.h",
		"/C/Users/William/Desktop/vkexamples/libs/gl3w/GL/gl3w.h",
		"/C/Users/William/Desktop/VkRayTutorials/Source/02_AccelerationStructure/02_AccelerationStructure.cpp",
		"/C/Users/William/Desktop/vkexamples/libs/vulkannv/nv_helpers_vk/VKHelpers.cpp",
		"/C/Users/William/Desktop/vkexamples/libs/vulkannv/nv_helpers_vk/VKHelpers.h",
		"/C/Users/William/Desktop/vkexamples/libs/vulkannv/vulkan_raytracing.cpp",
		"/C/Users/William/Desktop/vkray_corgi/shaders/basic.frag",
		"/C/Users/William/Desktop/vulkan_phong/shaders/phong.frag",
		"/C/Users/William/Desktop/vulkan_phong/shaders/phong.vert",
		"/C/Users/William/Desktop/vulkan_phong/main.cpp",
		"/C/Users/William/Desktop/vulkan_phong/src/input.cpp",
		"/C/Users/William/Desktop/vulkan_phong/src/input.h",
		"/C/Users/William/Desktop/vulkan_phong/src/joiner.cpp",
		"/C/Users/William/Desktop/vulkan_phong/src/joiner.h",
		"/C/Users/William/Desktop/vulkan_phong/src/engine.cpp",
		"/C/Users/William/Desktop/vulkan_phong/src/engine.h",
		"/C/Users/William/Desktop/corgi_texture.jpg",
		"/C/Users/William/Desktop/corgi.obj",
		"/C/Users/William/Desktop/13467_Cardigan_Welsh_Corgi_v1_L3.obj",
		"/C/Users/William/Desktop/vulkan_phong/.gitignore",
		"/C/Users/William/Desktop/vulkan_phong/nsight_vulkan_phong/CppCaptures/Vulkan-Phong__2019_07_26__18_00_10/args.hxx",
		"/C/Users/William/Desktop/terrain.mtl",
		"/C/Users/William/Desktop/model.obj",
		"/C/Users/William/Desktop/vulkan_phong/shaders/basic.vert",
		"/C/Users/William/Desktop/vulkan_phong/shaders/basic.frag",
		"/C/Users/William/Desktop/vulkan_phong/shaders/test.vert",
		"/C/Users/William/Desktop/vulkan_phong/shaders/test.frag",
		"/C/Users/William/Downloads/default.html",
		"/C/Users/William/.ssh/id_rsa.pub",
		"/C/Users/William/.ssh/id_rsa",
		"/C/Users/William/AppData/Roaming/Sublime Text 3/Packages/User/Terminal (Windows).sublime-settings",
		"/C/Users/William/AppData/Roaming/Sublime Text 3/Packages/User/Terminal.sublime-settings",
		"/C/Users/William Lew/Desktop/vulkan_phong/src/test_object.cpp",
		"/C/Users/William Lew/Desktop/vulkan_phong/src/test_object.h",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/test.frag",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/test.vert",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/basic.frag",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/basic.vert",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/vert.spv",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/test.fragment",
		"/C/Users/William Lew/Desktop/vulkan_phong/shaders/test.vertex",
		"/C/Users/William Lew/Desktop/no_tears/src/examples/lighting_test.cpp",
		"/C/Users/William Lew/Desktop/no_tears/src/examples/lighting_test.h",
		"/C/Users/William Lew/Desktop/no_tears/shaders/phong.vertex",
		"/C/Users/William Lew/Desktop/no_tears/src/geometry.h",
		"/C/Users/William Lew/Desktop/no_tears/src/geometry.cpp",
		"/C/Users/William Lew/Desktop/no_tears/src/examples/scavenger_hunt.cpp",
		"/C/Users/William Lew/Desktop/no_tears/src/examples/scavenger_hunt.h",
		"/C/Users/William Lew/Desktop/no_tears/src/engine.cpp",
		"/C/Users/William Lew/Desktop/no_tears/src/input.cpp",
		"/C/Users/William Lew/Desktop/no_tears/project.sublime-project"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Shape",
			"radius",
			"normalAt",
			"modelMatrix",
			".material",
			"sphere.modelMatrix",
			"EPSILON_TUPLE",
			"EPILSON_TUPLE",
			"sphereArray",
			"int",
			"sphere",
			"1000",
			"250",
			"500",
			"minor",
			"intersection",
			"project",
			"eyeV",
			"normal",
			"eye",
			"sphere.tra",
			"int",
			"once",
			"ray",
			"intersection",
			"Circle",
			")\n",
			"matrixA",
			"0",
			"2",
			"Matrix4",
			"matrixA",
			"x",
			"Matrix4x4",
			"data",
			"x",
			"return temp;",
			"Tuple temp =",
			"*"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src_CPU/world.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6497,
						"regions":
						{
						},
						"selection":
						[
							[
								108,
								108
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src_CPU/camera.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1929,
						"regions":
						{
						},
						"selection":
						[
							[
								701,
								701
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 19.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src_CPU/canvas.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1185,
						"regions":
						{
						},
						"selection":
						[
							[
								262,
								262
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src_CPU/matrix.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4107,
						"regions":
						{
						},
						"selection":
						[
							[
								240,
								240
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src_CPU/ray.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 519,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src_CPU/light.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1302,
						"regions":
						{
						},
						"selection":
						[
							[
								50,
								40
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src_CPU/transform.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1283,
						"regions":
						{
						},
						"selection":
						[
							[
								248,
								248
							],
							[
								257,
								257
							],
							[
								266,
								266
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "project.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 586,
						"regions":
						{
						},
						"selection":
						[
							[
								585,
								585
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 1.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 8,
					"file": "src_CPU/sphere.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2524,
						"regions":
						{
						},
						"selection":
						[
							[
								541,
								541
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src_CPU/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1079,
						"regions":
						{
						},
						"selection":
						[
							[
								806,
								806
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src_CPU/canvas.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1185,
						"regions":
						{
						},
						"selection":
						[
							[
								848,
								848
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 22.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src_CPU/camera.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1929,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src_CPU/transform.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1283,
						"regions":
						{
						},
						"selection":
						[
							[
								345,
								345
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src_CPU/tuple.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2503,
						"regions":
						{
						},
						"selection":
						[
							[
								253,
								253
							],
							[
								302,
								302
							],
							[
								351,
								351
							],
							[
								400,
								400
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 177.0,
						"translation.y": 6.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src_CPU/matrix.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4107,
						"regions":
						{
						},
						"selection":
						[
							[
								241,
								241
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src_CPU/ray.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 519,
						"regions":
						{
						},
						"selection":
						[
							[
								102,
								102
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src_CPU/light.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1302,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src_CPU/sphere.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2524,
						"regions":
						{
						},
						"selection":
						[
							[
								1673,
								1673
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "project.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"wo",
				"src_CPU/world.h"
			],
			[
				"tup",
				"src_CPU/tuple.h"
			],
			[
				"sp",
				"src_CPU/sphere.h"
			],
			[
				"light",
				"src_CPU/light.h"
			],
			[
				"",
				"src_CPU/light.h"
			],
			[
				"camera",
				"src_CPU/camera.h"
			],
			[
				"ca",
				"src_CPU/canvas.h"
			],
			[
				"ra",
				"src_CPU/ray.h"
			],
			[
				"can",
				"src_CPU/canvas.h"
			],
			[
				"wor",
				"src_CPU/world.h"
			],
			[
				"mai",
				"src_CPU/main.cpp"
			],
			[
				"matrix",
				"src_CPU/matrix.h"
			],
			[
				"proj",
				"project.sublime-project"
			],
			[
				".sh",
				"run-cpu.sh"
			],
			[
				"sph",
				"src_CPU/sphere.h"
			],
			[
				"ray",
				"src_CPU/ray.h"
			],
			[
				"lig",
				"src_CPU/light.h"
			],
			[
				"sh",
				"src_CPU/sphere.h"
			],
			[
				"ligh",
				"src_CPU/light.h"
			],
			[
				"pro",
				"project.sublime-project"
			],
			[
				"ma",
				"src_CPU/matrix.h"
			],
			[
				"tran",
				"src_CPU\\transform.h"
			],
			[
				"Vk",
				"src\\vk_context.cpp"
			],
			[
				"con",
				"src\\vk_context.cpp"
			],
			[
				"eng",
				"src\\engine.cpp"
			],
			[
				"bais",
				"shaders\\basic.vert"
			],
			[
				"fa",
				"shaders\\basic.frag"
			],
			[
				"en",
				"src\\engine.cpp"
			],
			[
				"test",
				"shaders\\test.frag"
			],
			[
				"g",
				"src\\geometry.cpp"
			],
			[
				"sca",
				"src\\examples\\scavenger_hunt.cpp"
			],
			[
				"geo",
				"src\\geometry.cpp"
			],
			[
				"phon",
				"shaders\\phong.vertex"
			],
			[
				"pon",
				"shaders\\phong.fragment"
			],
			[
				"inp",
				"src\\input.cpp"
			],
			[
				"exter",
				"src\\external_context.cpp"
			],
			[
				"scav",
				"src\\examples\\scavenger_hunt.h"
			],
			[
				"san",
				"src\\examples\\no_tears.cpp"
			],
			[
				"engi",
				"src\\engine.cpp"
			],
			[
				"basi",
				"shaders\\basic.fragment"
			],
			[
				"frag",
				"shaders\\textured.fragment"
			],
			[
				"verte",
				"shaders\\basic.vertex"
			],
			[
				"search",
				"src\\external_context.h"
			],
			[
				"no",
				"src\\examples\\no_tears.cpp"
			],
			[
				"joi",
				"src\\joiner.cpp"
			],
			[
				"engin",
				"src\\engine.cpp"
			],
			[
				"p",
				"no_tears\\project.sublime-project"
			],
			[
				"ext",
				"no_tears\\src\\external_context.cpp"
			],
			[
				"tex",
				"no_tears\\shaders\\textured.vertex"
			],
			[
				"shader",
				"shaders\\basic.vertex"
			],
			[
				"ve",
				"src\\vector2.h"
			],
			[
				"sam",
				"client_vm/sample_s_json.txt"
			],
			[
				"engine",
				"server/client/src/engine.js"
			],
			[
				"sy",
				"synopsis"
			],
			[
				"sha",
				"server/client/src/shader_source.js"
			],
			[
				"shad",
				"server/client/src/shader_source.js"
			],
			[
				"sb-d",
				"client_vm/sb-show-deps"
			],
			[
				"sb-sh",
				"client_vm/sb-show-deps"
			],
			[
				"ge",
				"server/client/src/geometry.js"
			],
			[
				"in",
				"server/client/index.html"
			],
			[
				"net",
				"server/client/src/network.js"
			],
			[
				"clien",
				"server/client/src/client.js"
			],
			[
				"cli",
				"client_vm/client.py"
			],
			[
				"show",
				"client_vm/sb-show-deps"
			],
			[
				"client.js",
				"server/client/src/client.js"
			],
			[
				"server",
				"server/server.js"
			],
			[
				"sock",
				"server/node_modules/engine.io/lib/socket.js"
			],
			[
				"font",
				"server/client/src/font_source.js"
			],
			[
				"client",
				"server/client/src/client.js"
			],
			[
				"co",
				"server/client/src/component.js"
			],
			[
				"inde",
				"server/client/index.html"
			],
			[
				"in\\",
				"server/node_modules/socket.io/lib/namespace.js"
			],
			[
				"20190614-1458-41.s",
				"server/temp_dump/20190614-1458-41.s.json"
			],
			[
				".",
				"server/node_modules/base64id/.npmignore"
			],
			[
				"geom",
				"server/client/src/geometry.js"
			],
			[
				"sampl",
				"client_vm/sample_s_json.txt"
			],
			[
				"join",
				"server/client/src/joiner.js"
			],
			[
				"component.js",
				"server/client/src/component.js"
			],
			[
				"source",
				"server/client/src/font_source.js"
			],
			[
				"omni",
				"sandbox-tools/lib/omni_list.py"
			],
			[
				"ser",
				"server/server.js"
			],
			[
				"deps",
				"sandbox-tools/lib/deps.py"
			],
			[
				"cl",
				"client_vm/client.py"
			],
			[
				"ind",
				"server/client/index.html"
			],
			[
				"serv",
				"server/server.js"
			],
			[
				"sb-",
				"client_vm/sb-show-deps"
			],
			[
				"show-dep",
				"client_vm/sb-show-deps"
			],
			[
				"sb-show",
				"client_vm/sb-show-deps.py"
			],
			[
				"clie",
				"client_vm/client.py"
			],
			[
				"m",
				"example_files/Makefile"
			],
			[
				"make",
				"example_files/Makefile"
			],
			[
				"mak",
				"example_files/Makefile"
			],
			[
				"comm",
				"example_files/commands"
			],
			[
				"deps.",
				"example_files/deps.py"
			],
			[
				"example/",
				"example_files/sb-show-deps.py"
			],
			[
				"json",
				"client_vm/dependency.json"
			],
			[
				"dep",
				"example_files/sb-show-deps.py"
			],
			[
				".css",
				"server/client/res/style.css"
			],
			[
				"css",
				"server/client/src/shader_source.js"
			],
			[
				"c",
				"client_vm/client.py"
			],
			[
				"de",
				"client_vm/dependency.json"
			],
			[
				"test.",
				"server/temp_dump/test.json"
			],
			[
				"depe",
				"client_vm/dependency.json"
			],
			[
				"transfer/",
				"transfer/client.py"
			],
			[
				"tes",
				"rest/test.json"
			],
			[
				"sty",
				"server/client/res/style.css"
			],
			[
				"e",
				"src/engine.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"AddCompletion"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 148.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
